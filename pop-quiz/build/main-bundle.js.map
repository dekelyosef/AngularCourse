{"version":3,"file":"main-bundle.js","mappings":";;;;;;;;;;;;;AAGA;IAGI,oBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAG,CAAC;IAElC,oCAAe,GAAf;QACI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC/B,CAAC;IAED,2BAAM,GAAN;QACI,IAAI,IAAI,CAAC,eAAe,EAAE,KAAK,EAAE,EAAE;YAC/B,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAI,kCAAU;aAAd;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;;;OAAA;IAED,iCAAY,GAAZ;QACI,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAG;YACpB,IAAG,GAAG,CAAC,SAAS,EAAE;gBACd,KAAK,EAAE,CAAC;aACX;QACL,CAAC,CAAC;QACF,OAAO,KAAK,GAAC,EAAE,CAAC;IACpB,CAAC;IAED,uCAAkB,GAAlB,UAAmB,WAAmB;QAClC,wDAAwD;IAC5D,CAAC;IAEL,iBAAC;AAAD,CAAC;AAlCY,gCAAU;;;;;;;;;;;;;;ACDvB;IACI;IAGA,CAAC;IAED,qBAAM,GAAN,UAAO,UAAsB;QACzB,4FAA4F;IAChG,CAAC;IAEL,WAAC;AAAD,CAAC;AAVY,oBAAI;;;;;;;UCFjB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;;ACtBA,qFAAwC;AACxC,mEAA4B;AAE5B,IAAM,IAAI,GAAG,EAAC,SAAS,EAAE,EAAE,EAAC,CAAC;AAC7B,IAAM,UAAU,GAAG,IAAI,uBAAU,CAAC,IAAI,CAAC,CAAC;AACxC,IAAM,IAAI,GAAG,IAAI,WAAI,EAAE,CAAC;AAExB,EAAE;AACF,yEAAyE;AACzE,EAAE;AACF,aAAa;AACb,4CAA4C;AAC5C,iFAAiF;AACjF,kCAAkC;AAClC,EAAE;AACF,gFAAgF;AAChF,iCAAiC;AACjC,UAAU;AACV,IAAI;AACJ,EAAE;AACF,8EAA8E;AAC9E,cAAc;AACd,6CAA6C;AAC7C,sEAAsE;AACtE,sEAAsE;AACtE,kFAAkF;AAClF,0CAA0C;AAC1C,0CAA0C;AAC1C,EAAE;AACF,4CAA4C;AAC5C,gDAAgD;AAChD,EAAE;AACF,2CAA2C;AAC3C,UAAU;AACV,IAAI","sources":["webpack://ts-web-app/./src/ts/examRunner.ts","webpack://ts-web-app/./src/ts/view.ts","webpack://ts-web-app/webpack/bootstrap","webpack://ts-web-app/./src/ts/main.ts"],"sourcesContent":["import {Exam} from \"./exam\";\r\nimport {Answer} from \"./answer\";\r\n\r\nexport class ExamRunner {\r\n    private answers: Answer[];\r\n\r\n    constructor(private exam: Exam) {}\r\n\r\n    currentQuestion(): number {\r\n        return this.answers.length;\r\n    }\r\n\r\n    isOver(): boolean {\r\n        if (this.currentQuestion() === 10) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    get getAnswers() {\r\n        return this.answers;\r\n    }\r\n\r\n    currentScore(): number {\r\n        let score = 0;\r\n        this.answers.forEach(ans => {\r\n            if(ans.isCorrect) {\r\n                score++;\r\n            }\r\n        })\r\n        return score*10;\r\n    }\r\n\r\n    answerNextQuestion(answerIndex: number) {\r\n        // this.exam.questions[this.currentQuestion()].answers =\r\n    }\r\n\r\n}","import {ExamRunner} from \"./examRunner\";\r\n\r\nexport class View {\r\n    constructor() {\r\n\r\n\r\n    }\r\n\r\n    render(examRunner: ExamRunner) {\r\n        // refreshes the current state of the various UI elements according to the state of the exam\r\n    }\r\n\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {ExamRunner} from \"./examRunner\";\r\nimport {View} from \"./view\";\r\n\r\nconst exam = {questions: []};\r\nconst examRunner = new ExamRunner(exam);\r\nconst view = new View();\r\n\r\n//\r\n// const btn = document.getElementById('button-ok') as HTMLButtonElement;\r\n//\r\n// if (btn) {\r\n//     btn.addEventListener('click', ev => {\r\n//         const inp = document.getElementById('input-name') as HTMLInputElement;\r\n//         const name = inp.value;\r\n//\r\n//         const span = document.getElementById('span-name') as HTMLSpanElement;\r\n//         span.innerText = name;\r\n//     });\r\n// }\r\n//\r\n// const btn2 = document.getElementById('button-equals') as HTMLButtonElement;\r\n// if (btn2) {\r\n//     btn2.addEventListener('click', ev => {\r\n//         const a = document.getElementById('a') as HTMLInputElement;\r\n//         const b = document.getElementById('b') as HTMLInputElement;\r\n//         const span = document.getElementById('span-result') as HTMLSpanElement;\r\n//         const aValue = a.valueAsNumber;\r\n//         const bValue = b.valueAsNumber;\r\n//\r\n//         // const calc = new Calculator();\r\n//         const res = calc.add(aValue, bValue);\r\n//\r\n//         span.innerText = res.toString();\r\n//     });\r\n// }"],"names":[],"sourceRoot":""}